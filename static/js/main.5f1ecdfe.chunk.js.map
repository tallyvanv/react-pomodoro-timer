{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","count","setCount","isActive","setIsActive","isClosed","setIsClosed","secondString","toString","padStart","minutes","Math","floor","interval","pause","close","useEffect","setInterval","prevCount","clearInterval","console","log","onClick","style","display","id","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qLAiFeA,MA/Ef,WAAgB,IAAD,EACaC,mBAAS,MADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,oBAAS,GAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,oBAAS,GAH5B,mBAGNK,EAHM,KAGIC,EAHJ,KAKPC,GADUN,EAAQ,IACKO,WAAWC,SAAS,EAAG,KAC9CC,EAAUC,KAAKC,MAAMX,EAAQ,IAC/BY,EAAW,KAsBf,SAASC,IACPV,GAAaD,GAuBf,SAASY,IACPT,GAAaD,GAOf,OA9CAW,qBAAU,WAOR,OANIb,IACFU,EAAWI,aAAY,WACrBf,GAAS,SAAAgB,GAAS,OAAIA,EAAY,OACjC,KATDjB,GAAS,IACXa,IACAC,MAUK,kBAAMI,cAAcN,MAC1B,CAACV,EAAUF,IAkCdmB,QAAQC,IAAI,WAAYhB,GAKpB,6BACE,4BAAKK,EAAL,MAAiBH,GACjB,4BAAQe,QAvCd,WACElB,GAAY,KAsCR,SACA,4BAAQkB,QAASR,GAAjB,SACA,4BAAQQ,QAjCd,WACEpB,EAAS,MACTE,GAAY,KA+BR,SACA,4BAAQkB,QA7Bd,WACOnB,GACHD,GAAS,SAAAgB,GAAS,OAAIA,EAAY,QA2BhC,KACA,4BAAQI,QAxBd,WACOnB,GACHD,GAAS,SAAAgB,GAAS,OAAIA,EAAY,MAEhCjB,GAAS,IACXC,EAAS,KAmBP,KACA,yBAAKqB,MAAO,CAACC,QAAUnB,EAAW,OAAS,SAAUoB,GAAG,UAAUC,UAAU,SAC1E,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQJ,QAASP,GAAjC,QACA,+C,KC9DQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,a","file":"static/js/main.5f1ecdfe.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nfunction App() {\n  const [count, setCount] = useState(1200);\n  const [isActive, setIsActive] = useState(false);\n  const [isClosed, setIsClosed] = useState(true); //modal box: true when count hits 0\n  const seconds = count % 60;\n  const secondString = seconds.toString().padStart(2, '0');\n  const minutes = Math.floor(count / 60);\n  let interval = null;\n\n  let checkZero= () =>{\n    if (count <= 0) {\n      pause();\n      close();\n    }\n  }\n  useEffect(() =>{\n    if (isActive) {\n      interval = setInterval(() => {\n        setCount(prevCount => prevCount - 1)\n      }, 1000);\n      checkZero();\n    }\n    return () => clearInterval(interval)\n  }, [isActive, count])\n\n  function start() {\n    setIsActive(true)\n  }\n\n  function pause() {\n    setIsActive(!isActive)\n  }\n\n  function reset() {\n    setCount(1200);\n    setIsActive(false);\n  }\n\n  function addTime() {\n    if (!isActive) {\n      setCount(prevCount => prevCount + 60)\n    }\n  }\n\n  function decreaseTime() {\n    if (!isActive) {\n      setCount(prevCount => prevCount - 60)\n    }\n    if (count <= 59) {\n      setCount(0)\n    }\n  }\n\n  function close() {\n    setIsClosed(!isClosed)\n  }\n\n  console.log(\"isClosed\", isClosed);\n  //console.log(\"isActive\", isActive);\n  //console.log(\"click\", click)\n\n  return (\n      <div>\n        <h1>{minutes} : {secondString}</h1>\n        <button onClick={start}>start</button>\n        <button onClick={pause}>pause</button>\n        <button onClick={reset}>reset</button>\n        <button onClick={addTime}>+</button>\n        <button onClick={decreaseTime}>-</button>\n        <div style={{display : isClosed ? 'none' : 'block'}} id=\"myModal\" className=\"modal\">\n          <div className=\"modal-content\">\n            <span className=\"close\" onClick={close}>&times;</span>\n            <p>Take a break</p>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from './App'\nimport './app.scss'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}